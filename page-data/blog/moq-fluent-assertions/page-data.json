{"componentChunkName":"component---src-pages-blog-markdown-remark-fields-slug-tsx","path":"/blog/moq-fluent-assertions/","result":{"data":{"markdownRemark":{"fields":{"slug":"moq-fluent-assertions"},"html":"<h1>FluentAssertions with Moq</h1>\n<p>For many years we (my team) have used <a href=\"https://fluentassertions.com\">FluentAssertions</a> to make assertions within unit tests. It allows you to make assertions using structural equality. Consider:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> myObj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> myObj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObj1<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">BeEquivalentTo</span><span class=\"token punctuation\">(</span>myObj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Clearly <code class=\"language-text\">myObj1</code> and <code class=\"language-text\">myObj2</code> have different reference equality (as they are the product of separate new statements), but they have the same values inside, so can be considered equivalent to each other. This is very handy, as it allows us to easily make assertions about the values of an object, this is especially useful when the object is instantiated inside the function we are testing, as we cannot mock it.</p>\n<p>Often we have similar issues when setting up Moqs. We want to ensure the values of the object passed into the function, but we cannot know the reference of the object. This leads to the use of <code class=\"language-text\">It.IsAny&lt;object>()</code> or <code class=\"language-text\">It.Is&lt;object>(a => a.Foo == \"Bar\")</code>, which is quick, but is not very specific. We can use the nuget\n<a href=\"https://github.com/ronaldbosma/FluentAssertions.ArgumentMatchers.Moq\">FluentAssertions.ArgumentMatchers.Moq</a> to help.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Mock<span class=\"token punctuation\">&lt;</span>IMyRepo<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmock<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">DoTheThing</span><span class=\"token punctuation\">(</span>Its<span class=\"token punctuation\">.</span><span class=\"token function\">EquivalentTo</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> CancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Returns</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Using <code class=\"language-text\">Its.EquivalentTo(obj)</code> instead of <code class=\"language-text\">It.Is(obj)</code> allows us to use structural equality. This makes writing better tests easier. There are also options to skip certain properties if you wish.</p>\n<p>We have all worked on project where <code class=\"language-text\">It.IsAny&lt;object>()</code> has been used. It allows us to tick the box and say we wrote a test, but it is generally far too permissive. This is an easy solution.</p>","frontmatter":{"date":"2 years ago","title":"Using FluentAssertions with Moq","author":"Matt McCorry","tags":"Moq,FluentAssertions,C#"}}},"pageContext":{"id":"19940ad3-21ce-5ee2-aa25-75baea77e960","fields__slug":"moq-fluent-assertions","__params":{"fields__slug":"moq-fluent-assertions"}}},"staticQueryHashes":["3460496508"],"slicesMap":{}}