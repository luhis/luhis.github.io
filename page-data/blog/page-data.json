{"componentChunkName":"component---src-pages-blog-tsx","path":"/blog/","result":{"data":{"blog":{"posts":[{"frontmatter":{"date":"13 hours ago","title":"VueJS vs React","author":"Matt McCorry"},"html":"<h2>Impressions of Vue vs React</h2>\n<p>Whilst the two are client side JavaScript frameworks there are some major differences in the usage.</p>\n<h3>Component Creation</h3>\n<p>In React, components can just be functions.  This means that to break out functionality into a new component is quick and simple, just pull out the JSX into a new function, add the props, and maybe the type definitions and you're done.  Maybe you want to move it to new file, but that's a decision for later.</p>\n<pre><code class=\"language-TypeScript\">const MyComponent: FC&#x3C;{name: string}> = ({name}) => &#x3C;span>Hello {name}&#x3C;/span>\n</code></pre>\n<p>In VueJS by contrast, components require much more work.  You must create the template, script, and style sections. It must be a new file.</p>\n<pre><code class=\"language-TypeScript\">&#x3C;Template>\n    &#x3C;div>Hello {{name}}&#x3C;/div>\n&#x3C;/Template>\n&#x3C;script>\nexport default {\n  name: 'myComponent'\n  props: {\n      name: String\n  }\n}\n&#x3C;/script>\n&#x3C;style>\n&#x3C;/style>\n</code></pre>\n<p>This resistance to breaking down components causes repetitive code bases.</p>","excerpt":"Impressions of Vue vs React Whilst the two are client side JavaScript frameworks there are some major differences in the usage. Componentâ€¦","id":"d1d98c74-e56c-5bd1-a7e3-6692346a5759"}]}},"pageContext":{}},"staticQueryHashes":["1326653821"]}