{"componentChunkName":"component---src-pages-blog-markdown-remark-fields-slug-tsx","path":"/blog/react-dates/","result":{"data":{"markdownRemark":{"fields":{"slug":"react-dates"},"html":"<h1>React Dates</h1>\n<p>Working with dates in React causes problems. JSON has no date format, so the API will serve up strings with the dates in ISO format.</p>\n<p>This causes a number of issues. Sometimes dates from the API will be strings, but dates created on the client side will be Date objects, meaning that when we access the property, we need to allow for parsing the dates before access. Some argue that using Date objects is dangerous, as they are mutable. They suggest storing everything as strings, which need to be parsed, or as numbers which allows sorting, but still needs expensive conversion before display.</p>\n<h2>TS Date</h2>\n<p><a href=\"https://www.npmjs.com/package/ts-date\">ts-date</a> is an immutable date wrapper package. It allows us to store dates as ValidDates in Redux without having to worry about them becoming mutated. It has performance similar to native Date objects, so it it fast to sort or display. It has another benefit of only allowing valid dates to be used, unlike the traditional JavaScript Date object</p>\n<h2>TypeScript Model Overrides</h2>\n<p>I know I want to use ValidDate objects as the container for my dates, I just need need to do the conversion from a string. I prefer to do this immediately after getting the data from the API, something like this just mapping the date fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notifications/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>eventId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> events <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> events<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> created<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">created</span><span class=\"token operator\">:</span> <span class=\"token function\">parseIsoOrThrow</span><span class=\"token punctuation\">(</span>created<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This works fine, but I prefer TypeScript, and I want the best coverage I can get. TypeScript has an interesting trick to help with this. Is is possible to override properties of an object, so I can have my application model containing ValidDate, but I can create a new type from it where the date field is a string.</p>\n<p>Consider this type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Override<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will take the type T, remove the properties that exist in P, then add the all the properties of P to it. Usage example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Notification</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> notificationId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> eventId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> created<span class=\"token operator\">:</span> ValidDate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ApiNotification</span> <span class=\"token operator\">=</span> Override<span class=\"token operator\">&lt;</span>\n    Notification<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> created<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is the cleanest solution I have found so far, it may be possible to improve upon it, ideally I would find a way to restrict is so that the properties in the overriding object must exist in the overridden, but I have found this to be good enough. Now if the Notification object is changed, the change is reflected in the ApiNotification object.</p>\n<p>Putting it together:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notifications/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>eventId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ApiNotification</span> <span class=\"token operator\">=</span> Override<span class=\"token operator\">&lt;</span>\n    Notification<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> created<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> events <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token generic-function\"><span class=\"token function\">extract</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">readonly</span> ApiNotification<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> events<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> created<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span>\n    created<span class=\"token operator\">:</span> <span class=\"token function\">parseIsoOrThrow</span><span class=\"token punctuation\">(</span>created<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This pattern is also good for when you have an model shared with an API, but in the UI you want to allow some field to be optional for instance.</p>","frontmatter":{"date":"4 years ago","title":"React Dates","author":"Matt McCorry","tags":"React,TypeScript"}}},"pageContext":{"id":"62161739-3292-58e1-869a-7e94b069910f","fields__slug":"react-dates","__params":{"fields__slug":"react-dates"}}},"staticQueryHashes":["2525421997","3460496508"],"slicesMap":{}}