{"version":3,"sources":["webpack://gatsby-starter-default/./node_modules/camelcase/index.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/commaLists/commaLists.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/html/html.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/oneLine/oneLine.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://gatsby-starter-default/./node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://gatsby-starter-default/./node_modules/react-icons/lib/esm/iconsManifest.js","webpack://gatsby-starter-default/./node_modules/react-icons/lib/esm/iconContext.js","webpack://gatsby-starter-default/./node_modules/react-icons/lib/esm/iconBase.js","webpack://gatsby-starter-default/./src/components/Contact.tsx","webpack://gatsby-starter-default/./src/components/Hobbies.tsx","webpack://gatsby-starter-default/./src/components/SocialMedia.tsx","webpack://gatsby-starter-default/./src/components/LeftCol.tsx","webpack://gatsby-starter-default/../src/image-utils.ts","webpack://gatsby-starter-default/../src/components/hooks.ts","webpack://gatsby-starter-default/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-default/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-default/../src/components/picture.tsx","webpack://gatsby-starter-default/../src/components/placeholder.tsx","webpack://gatsby-starter-default/../src/components/main-image.tsx","webpack://gatsby-starter-default/../src/components/static-image.server.tsx","webpack://gatsby-starter-default/../src/components/static-image.tsx"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","default","strings","raw","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","value","_classCallCheck","instance","TemplateTag","_this","this","_len","arguments","transformers","_key","tag","_len2","expressions","_key2","interimTag","bind","transformEndResult","transformString","reduce","processSubstitutions","transformer","previousTag","template","_len3","substitutions","_key3","apply","undefined","concat","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","res","transform","onString","onSubstitution","endResult","onEndResult","defaults","separator","conjunction","serial","opts","arrayLength","indent","match","separatorIndex","lastIndexOf","_toConsumableArray","arr","arr2","from","type","Math","min","el","regexp","RegExp","Error","side","splitBy","includes","split","isValidValue","Number","isNaN","replaceWhat","replaceWith","toString","DefaultContext","color","size","className","style","attr","IconContext","__assign","t","s","n","p","hasOwnProperty","call","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","Tree2Element","tree","node","child","GenIcon","data","IconBase","elem","conf","title","svgProps","computedSize","stroke","fill","strokeWidth","height","width","xmlns","children","Consumer","Menu","href","Link","to","useStaticQuery","Hero","isLight","isFullheight","G","image","placeholderImage","childImageSharp","gatsbyImageData","alt","Title","Subtitle","isAlignContentStart","Container","imageCache","Set","hasNativeLazyLoadSupport","HTMLImageElement","storeImageloaded","cacheKey","add","hasImageLoaded","has","format","getMainProps","isLoading","isLoaded","images","loading","toggleLoaded","ref","current","document","documentElement","dataset","objectFit","objectPosition","window","objectFitPolyfill","import","global","GATSBY___IMAGE","left","position","top","transition","willChange","shouldLoad","data-main-image","opacity","onLoad","currentTarget","img","Image","src","currentSrc","decode","then","getPlaceholderProps","placeholder","layout","backgroundColor","wrapperStyle","bottom","right","result","aria-hidden","data-placeholder-image","LayoutWrapper","sizer","React","paddingTop","maxWidth","display","role","Fragment","hasShownWarning","GatsbyImageHydrator","as","Type","preactClass","onStartLoad","customOnLoad","warn","root","useRef","hydrated","unobserveRef","lazyHydrator","useState","toggleIsLoading","toggleIsLoaded","console","overflow","data-gatsby-image-wrapper","wStyle","wClass","wrapperProps","useEffect","hasSSRHtml","querySelector","wasCached","complete","JSON","stringify","addEventListener","removeEventListener","intersectionObserver","createIntersectionObserver","lazyHydrate","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","displayName","srcSet","innerRef","decoding","Picture","forwardRef","fallback","sources","sizes","fallbackImage","media","propTypes","PropTypes","Placeholder","propName","componentName","MainImage","checkDimensionProps","validLayouts","StaticImage","GatsbyImageBrowser","imageData","__imageData","__error"],"mappings":"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","file":"b773da839d3eeb4cc9abf8d4efdae6254d8686d4-b6d47ea7b272918bd431.js","sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import \"core-js/modules/es.array.reduce\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\n\n\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      } // else, return a transformed end result of processing the template with our tag\n\n\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    }; // if first argument is an array, extrude it as a list of transformers\n\n\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    } // if any transformers are functions, this means they are not initiated - automatically initiate them\n\n\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    }); // return an ES2015 template tag\n\n    return this.tag;\n  }\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n\n      return this.transformers.reduce(cb, str);\n    }\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n\n      return this.transformers.reduce(cb, substitution);\n    }\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\n\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial; // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        } // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n\n\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;","function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\n\n\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n\n        return endResult;\n      }\n\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaLists = new TemplateTag(inlineArrayTransformer({\n  separator: ','\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaLists;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaListsAnd;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaListsOr;","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      } // Do not touch if null or undefined\n\n\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\nexport default html;","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\nexport default safeHtml;","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\nexport default oneLine;","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\nexport default oneLineTrim;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({\n  separator: ','\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaLists;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaListsOr;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaListsAnd;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\nexport default inlineLists;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineInlineLists;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\nexport default stripIndent;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\nexport default stripIndents;","export var IconsManifest = [{\n  \"id\": \"fa\",\n  \"name\": \"Font Awesome\",\n  \"projectUrl\": \"https://fontawesome.com/\",\n  \"license\": \"CC BY 4.0 License\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n}, {\n  \"id\": \"io\",\n  \"name\": \"Ionicons 4\",\n  \"projectUrl\": \"https://ionicons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"io5\",\n  \"name\": \"Ionicons 5\",\n  \"projectUrl\": \"https://ionicons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"md\",\n  \"name\": \"Material Design icons\",\n  \"projectUrl\": \"http://google.github.io/material-design-icons/\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"https://github.com/google/material-design-icons/blob/master/LICENSE\"\n}, {\n  \"id\": \"ti\",\n  \"name\": \"Typicons\",\n  \"projectUrl\": \"http://s-ings.com/typicons/\",\n  \"license\": \"CC BY-SA 3.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n}, {\n  \"id\": \"go\",\n  \"name\": \"Github Octicons icons\",\n  \"projectUrl\": \"https://octicons.github.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/primer/octicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"fi\",\n  \"name\": \"Feather\",\n  \"projectUrl\": \"https://feathericons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/feathericons/feather/blob/master/LICENSE\"\n}, {\n  \"id\": \"gi\",\n  \"name\": \"Game Icons\",\n  \"projectUrl\": \"https://game-icons.net/\",\n  \"license\": \"CC BY 3.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/\"\n}, {\n  \"id\": \"wi\",\n  \"name\": \"Weather Icons\",\n  \"projectUrl\": \"https://erikflowers.github.io/weather-icons/\",\n  \"license\": \"SIL OFL 1.1\",\n  \"licenseUrl\": \"http://scripts.sil.org/OFL\"\n}, {\n  \"id\": \"di\",\n  \"name\": \"Devicons\",\n  \"projectUrl\": \"https://vorillaz.github.io/devicons/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"ai\",\n  \"name\": \"Ant Design Icons\",\n  \"projectUrl\": \"https://github.com/ant-design/ant-design-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"bs\",\n  \"name\": \"Bootstrap Icons\",\n  \"projectUrl\": \"https://github.com/twbs/icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"ri\",\n  \"name\": \"Remix Icon\",\n  \"projectUrl\": \"https://github.com/Remix-Design/RemixIcon\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"http://www.apache.org/licenses/\"\n}, {\n  \"id\": \"fc\",\n  \"name\": \"Flat Color Icons\",\n  \"projectUrl\": \"https://github.com/icons8/flat-color-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"gr\",\n  \"name\": \"Grommet-Icons\",\n  \"projectUrl\": \"https://github.com/grommet/grommet-icons\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"http://www.apache.org/licenses/\"\n}, {\n  \"id\": \"hi\",\n  \"name\": \"Heroicons\",\n  \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"si\",\n  \"name\": \"Simple Icons\",\n  \"projectUrl\": \"https://simpleicons.org/\",\n  \"license\": \"CC0 1.0 Universal\",\n  \"licenseUrl\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n}, {\n  \"id\": \"im\",\n  \"name\": \"IcoMoon Free\",\n  \"projectUrl\": \"https://github.com/Keyamoon/IcoMoon-Free\",\n  \"license\": \"CC BY 4.0 License\"\n}, {\n  \"id\": \"bi\",\n  \"name\": \"BoxIcons\",\n  \"projectUrl\": \"https://github.com/atisawd/boxicons\",\n  \"license\": \"CC BY 4.0 License\"\n}, {\n  \"id\": \"cg\",\n  \"name\": \"css.gg\",\n  \"projectUrl\": \"https://github.com/astrit/css.gg\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"vsc\",\n  \"name\": \"VS Code Icons\",\n  \"projectUrl\": \"https://github.com/microsoft/vscode-codicons\",\n  \"license\": \"CC BY 4.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n}];","import React from 'react';\nexport var DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nexport var IconContext = React.createContext && React.createContext(DefaultContext);","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { IconContext, DefaultContext } from './iconContext';\n\nfunction Tree2Element(tree) {\n  return tree && tree.map(function (node, i) {\n    return React.createElement(node.tag, __assign({\n      key: i\n    }, node.attr), Tree2Element(node.child));\n  });\n}\n\nexport function GenIcon(data) {\n  return function (props) {\n    return React.createElement(IconBase, __assign({\n      attr: __assign({}, data.attr)\n    }, props), Tree2Element(data.child));\n  };\n}\nexport function IconBase(props) {\n  var elem = function elem(conf) {\n    var attr = props.attr,\n        size = props.size,\n        title = props.title,\n        svgProps = __rest(props, [\"attr\", \"size\", \"title\"]);\n\n    var computedSize = size || conf.size || \"1em\";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + ' ' : '') + props.className;\n    return React.createElement(\"svg\", __assign({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: __assign(__assign({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), title && React.createElement(\"title\", null, title), props.children);\n  };\n\n  return IconContext !== undefined ? React.createElement(IconContext.Consumer, null, function (conf) {\n    return elem(conf);\n  }) : elem(DefaultContext);\n}","import React from \"react\";\nimport { FaHome, FaEnvelopeOpen, FaPhone } from \"react-icons/fa\";\nimport { Menu } from \"trunx\";\n\nconst Contact: React.FC = () => (\n  <React.Fragment>\n    <Menu.Label>Contact</Menu.Label>\n    <Menu.List>\n      <Menu>\n        <a>\n          <FaPhone /> +44 (0)7851 326 402\n        </a>\n      </Menu>\n      <Menu>\n        <a href=\"mailto:mccorry@gmail.com\" className=\"icon-text\">\n          <FaEnvelopeOpen /> mccorry@gmail.com\n        </a>\n      </Menu>\n      <Menu>\n        <a>\n          <FaHome /> Brighton, UK\n        </a>\n      </Menu>\n    </Menu.List>\n  </React.Fragment>\n);\n\nexport default Contact;\n","import React from \"react\";\nimport { Menu } from \"trunx\";\n\nconst Hobbies: React.FC = () => (\n  <React.Fragment>\n    <Menu.Label>Hobbies</Menu.Label>\n    <Menu.List>\n      <Menu>\n        <a>Electronics</a>\n      </Menu>\n      <Menu>\n        <a>Grass Autotest racing</a>\n      </Menu>\n      <Menu>\n        <a>Ancient History</a>\n      </Menu>\n    </Menu.List>\n  </React.Fragment>\n);\n\nexport default Hobbies;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { FaLinkedin, FaGithub, FaBlog, FaGlobe } from \"react-icons/fa\";\nimport { Menu } from \"trunx\";\n\nconst SocialMedia: React.FC = () => (\n  <React.Fragment>\n    <Menu.Label>Social Media</Menu.Label>\n    <Menu.List>\n      <Menu>\n        <a\n          href=\"https://www.linkedin.com/in/matthew-mccorry/\"\n          className=\"icon-text\"\n        >\n          <FaLinkedin /> matthew-mccorry\n        </a>\n      </Menu>\n      <Menu>\n        <a href=\"https://github.com/luhis\" className=\"icon-text\">\n          <FaGithub /> luhis\n        </a>\n      </Menu>\n      <Menu>\n        <Link to=\"/blog\" className=\"icon-text\">\n          <FaBlog /> Blog\n        </Link>\n      </Menu>\n      <Menu>\n        <Link to=\"/\" className=\"icon-text\">\n          <FaGlobe /> Website\n        </Link>\n      </Menu>\n    </Menu.List>\n  </React.Fragment>\n);\n\nexport default SocialMedia;\n","import React from \"react\";\nimport { Hero, Title, Container, Menu, Subtitle } from \"trunx\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nimport Contact from \"./Contact\";\nimport Hobbies from \"./Hobbies\";\nimport SocialMedia from \"./SocialMedia\";\n\nconst LeftCol: React.FC = () => {\n  const data = useStaticQuery(graphql`{\n  placeholderImage: file(relativePath: {eq: \"profile.jpg\"}) {\n    childImageSharp {\n      gatsbyImageData(width: 300, layout: CONSTRAINED)\n    }\n  }\n}\n`);\n  return (\n    <Hero isLight isFullheight>\n      <Hero.Head>\n        <figure className=\"image\">\n          <GatsbyImage\n            image={data.placeholderImage.childImageSharp.gatsbyImageData}\n            alt=\"profile picture\" />\n        </figure>\n        <Title>Matthew McCorry</Title>\n        <Subtitle>.Net and TypeScript Developer</Subtitle>\n      </Hero.Head>\n      <Hero.Body isAlignContentStart>\n        <Container>\n          <Menu>\n            <Contact />\n            <SocialMedia />\n            <Hobbies />\n          </Menu>\n        </Container>\n      </Hero.Body>\n    </Hero>\n  );\n};\n\nexport default LeftCol;\n","/* eslint-disable no-unused-expressions */\nimport { stripIndent } from \"common-tags\"\nimport camelCase from \"camelcase\"\nimport { IGatsbyImageData } from \".\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320,\n  654,\n  768,\n  1024,\n  1366,\n  1600,\n  1920,\n  2048,\n  2560,\n  3440,\n  3840,\n  4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?:\n    | ((args: IGatsbyImageHelperArgs) => string | undefined)\n    | string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.substr(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(stripIndent`\n    The requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* eslint-disable no-unused-expressions */\nimport {\n  useState,\n  CSSProperties,\n  useEffect,\n  HTMLAttributes,\n  ImgHTMLAttributes,\n  ReactEventHandler,\n  SetStateAction,\n  Dispatch,\n  RefObject,\n} from \"react\"\nimport { Node } from \"gatsby\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport {\n  IGatsbyImageHelperArgs,\n  generateImageData,\n  Layout,\n  EVERY_BREAKPOINT,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\nconst imageCache = new Set<string>()\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function storeImageloaded(cacheKey?: string): void {\n  if (cacheKey) {\n    imageCache.add(cacheKey)\n  }\n}\n\nexport function hasImageLoaded(cacheKey: string): boolean {\n  return imageCache.has(cacheKey)\n}\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\ntype ImageDataLike = FileNode | IGatsbyImageDataParent | IGatsbyImageData\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!global.GATSBY___IMAGE) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!global.GATSBY___IMAGE) {\n      wrapperStyle.display = `inline-block`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport async function applyPolyfill(\n  ref: RefObject<HTMLImageElement>\n): Promise<void> {\n  if (!(`objectFitPolyfill` in window)) {\n    await import(\n      /* webpackChunkName: \"gatsby-plugin-image-objectfit-polyfill\" */ `objectFitPolyfill`\n    )\n  }\n  ;(window as any).objectFitPolyfill(ref.current)\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `useGatsbyImage`,\n  formats = [`auto`],\n  breakpoints = EVERY_BREAKPOINT,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  toggleLoaded?: (loaded: boolean) => void,\n  cacheKey?: string,\n  ref?: RefObject<HTMLImageElement>,\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  const onLoad: ReactEventHandler<HTMLImageElement> = function (e) {\n    if (isLoaded) {\n      return\n    }\n\n    storeImageloaded(cacheKey)\n\n    const target = e.currentTarget\n    const img = new Image()\n    img.src = target.currentSrc\n\n    if (img.decode) {\n      // Decode the image through javascript to support our transition\n      img\n        .decode()\n        .catch(() => {\n          // ignore error, we just go forward\n        })\n        .then(() => {\n          toggleLoaded(true)\n        })\n    } else {\n      toggleLoaded(true)\n    }\n  }\n\n  // Polyfill \"object-fit\" if unsupported (mostly IE)\n  if (ref?.current && !(`objectFit` in document.documentElement.style)) {\n    ref.current.dataset.objectFit = style.objectFit ?? `cover`\n    ref.current.dataset.objectPosition = `${style.objectPosition ?? `50% 50%`}`\n    applyPolyfill(ref)\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!global.GATSBY___IMAGE) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n    onLoad,\n    ref,\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!global.GATSBY___IMAGE) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport function useImageLoaded(\n  cacheKey: string,\n  loading: \"lazy\" | \"eager\",\n  ref: any\n): {\n  isLoaded: boolean\n  isLoading: boolean\n  toggleLoaded: Dispatch<SetStateAction<boolean>>\n} {\n  const [isLoaded, toggleLoaded] = useState(false)\n  const [isLoading, toggleIsLoading] = useState(loading === `eager`)\n\n  const rAF =\n    typeof window !== `undefined` && `requestAnimationFrame` in window\n      ? requestAnimationFrame\n      : function (cb: TimerHandler): number {\n          return setTimeout(cb, 16)\n        }\n  const cRAF =\n    typeof window !== `undefined` && `cancelAnimationFrame` in window\n      ? cancelAnimationFrame\n      : clearTimeout\n\n  useEffect(() => {\n    let interval: number\n    // @see https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback/50019873#50019873\n    function toggleIfRefExists(): void {\n      if (ref.current) {\n        if (loading === `eager` && ref.current.complete) {\n          storeImageloaded(cacheKey)\n          toggleLoaded(true)\n        } else {\n          toggleIsLoading(true)\n        }\n      } else {\n        interval = rAF(toggleIfRefExists)\n      }\n    }\n    toggleIfRefExists()\n\n    return (): void => {\n      cRAF(interval)\n    }\n  }, [])\n\n  return {\n    isLoading,\n    isLoaded,\n    toggleLoaded,\n  }\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../global.d.ts\" />\n\nimport React, { Fragment, FunctionComponent, ReactElement } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer: string | null = null\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n  return sizer\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> = function LayoutWrapper({\n  layout,\n  width,\n  height,\n  children,\n}) {\n  let sizer: ReactElement | null = null\n  if (layout === `fullWidth`) {\n    sizer = (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n  if (layout === `constrained`) {\n    sizer = (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n  return (\n    <Fragment>\n      {sizer}\n      {children}\n\n      {\n        // eslint-disable-next-line no-undef\n        SERVER && <NativeScriptLoading />\n      }\n    </Fragment>\n  )\n}\n","/* eslint-disable no-unused-expressions */\nimport React, {\n  ElementType,\n  useEffect,\n  useRef,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  useState,\n  RefObject,\n  CSSProperties,\n} from \"react\"\nimport {\n  getWrapperProps,\n  hasNativeLazyLoadSupport,\n  storeImageloaded,\n} from \"./hooks\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport { Layout } from \"../image-utils\"\nimport { getSizer } from \"./layout-wrapper\"\n\n// eslint-disable-next-line @typescript-eslint/interface-name-prefix\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: () => void\n  onError?: () => void\n  onStartLoad?: (props: { wasCached?: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nlet hasShownWarning = false\n\nexport const GatsbyImageHydrator: FunctionComponent<GatsbyImageProps> = function GatsbyImageHydrator({\n  as: Type = `div`,\n  style,\n  className,\n  class: preactClass,\n  onStartLoad,\n  image,\n  onLoad: customOnLoad,\n  backgroundColor,\n  loading = `lazy`,\n  ...props\n}) {\n  if (!image) {\n    if (process.env.NODE_ENV === `development`) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n    }\n    return null\n  }\n  if (preactClass) {\n    className = preactClass\n  }\n  const { width, height, layout, images } = image\n\n  const root = useRef<HTMLElement>()\n  const hydrated = useRef(false)\n  const unobserveRef = useRef<\n    ((element: RefObject<HTMLElement | undefined>) => void) | null\n  >(null)\n  const lazyHydrator = useRef<(() => void) | null>(null)\n  const ref = useRef<HTMLImageElement | undefined>()\n  const [isLoading, toggleIsLoading] = useState(hasNativeLazyLoadSupport())\n  const [isLoaded, toggleIsLoaded] = useState(false)\n\n  if (!global.GATSBY___IMAGE && !hasShownWarning) {\n    hasShownWarning = true\n    console.warn(\n      `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n    )\n  }\n\n  const { style: wStyle, className: wClass, ...wrapperProps } = getWrapperProps(\n    width,\n    height,\n    layout\n  )\n\n  useEffect((): (() => void) | undefined => {\n    if (root.current) {\n      const hasSSRHtml = root.current.querySelector(\n        `[data-gatsby-image-ssr]`\n      ) as HTMLImageElement\n\n      // when SSR and native lazyload is supported we'll do nothing ;)\n      if (hasNativeLazyLoadSupport() && hasSSRHtml && global.GATSBY___IMAGE) {\n        onStartLoad?.({ wasCached: false })\n\n        if (hasSSRHtml.complete) {\n          customOnLoad?.()\n          storeImageloaded(JSON.stringify(images))\n        } else {\n          hasSSRHtml.addEventListener(`load`, function onLoad() {\n            hasSSRHtml.removeEventListener(`load`, onLoad)\n\n            customOnLoad?.()\n            storeImageloaded(JSON.stringify(images))\n          })\n        }\n        return undefined\n      }\n\n      // Fallback to custom lazy loading (intersection observer)\n      import(`./intersection-observer`).then(\n        ({ createIntersectionObserver }) => {\n          const intersectionObserver = createIntersectionObserver(() => {\n            if (root.current) {\n              onStartLoad?.({ wasCached: false })\n              toggleIsLoading(true)\n            }\n          })\n\n          if (root.current) {\n            unobserveRef.current = intersectionObserver(root)\n          }\n        }\n      )\n    }\n\n    return (): void => {\n      if (unobserveRef.current) {\n        unobserveRef.current(root)\n\n        // on unmount, make sure we cleanup\n        if (hydrated.current && lazyHydrator.current) {\n          lazyHydrator.current()\n        }\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (root.current) {\n      const hasSSRHtml = root.current.querySelector(`[data-gatsby-image-ssr]`)\n      // On first server hydration do nothing\n      if (hasNativeLazyLoadSupport() && hasSSRHtml && !hydrated.current) {\n        hydrated.current = true\n        return\n      }\n\n      import(`./lazy-hydrate`).then(({ lazyHydrate }) => {\n        lazyHydrator.current = lazyHydrate(\n          {\n            image,\n            isLoading,\n            isLoaded,\n            toggleIsLoaded: () => {\n              customOnLoad?.()\n              toggleIsLoaded(true)\n            },\n            ref,\n            loading,\n            ...props,\n          },\n          root,\n          hydrated\n        )\n      })\n    }\n  }, [\n    width,\n    height,\n    layout,\n    images,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    props,\n  ])\n\n  const sizer = getSizer(layout, width, height)\n\n  return (\n    <Type\n      {...wrapperProps}\n      style={{\n        ...wStyle,\n        ...style,\n        backgroundColor,\n      }}\n      className={`${wClass}${className ? ` ${className}` : ``}`}\n      ref={root}\n      dangerouslySetInnerHTML={{\n        __html: sizer,\n      }}\n      suppressHydrationWarning\n    />\n  )\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = function GatsbyImage(\n  props\n) {\n  return <GatsbyImageHydrator {...props} />\n}\nGatsbyImage.displayName = `GatsbyImage`\n","/* eslint-disable filenames/match-regex */\nimport React, {\n  FunctionComponent,\n  ImgHTMLAttributes,\n  forwardRef,\n  LegacyRef,\n} from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n  innerRef: LegacyRef<HTMLImageElement>\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  innerRef,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n      ref={innerRef}\n    />\n  )\n}\n\nexport const Picture = forwardRef<HTMLImageElement, PictureProps>(\n  function Picture(\n    { fallback, sources = [], shouldLoad = true, ...props },\n    ref\n  ) {\n    const sizes = props.sizes || fallback?.sizes\n    const fallbackImage = (\n      <Image\n        {...props}\n        {...fallback}\n        sizes={sizes}\n        shouldLoad={shouldLoad}\n        innerRef={ref}\n      />\n    )\n\n    if (!sources.length) {\n      return fallbackImage\n    }\n\n    return (\n      <picture>\n        {sources.map(({ media, srcSet, type }) => (\n          <source\n            key={`${media}-${type}-${srcSet}`}\n            type={type}\n            media={media}\n            srcSet={srcSet}\n            sizes={sizes}\n          />\n        ))}\n        {fallbackImage}\n      </picture>\n    )\n  }\n)\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> = function Placeholder({\n  fallback,\n  ...props\n}) {\n  if (fallback) {\n    return (\n      <Picture\n        {...props}\n        fallback={{\n          src: fallback,\n        }}\n        aria-hidden\n        alt=\"\"\n      />\n    )\n  } else {\n    return <div {...props}></div>\n  }\n}\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { forwardRef } from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage = forwardRef<HTMLImageElement, MainImageProps>(\n  function MainImage(props, ref) {\n    return (\n      <>\n        <Picture ref={ref} {...props} />\n        <noscript>\n          <Picture {...props} shouldLoad={true} />\n        </noscript>\n      </>\n    )\n  }\n)\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport { GatsbyImage as GatsbyImageServer } from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"sourceRoot":""}